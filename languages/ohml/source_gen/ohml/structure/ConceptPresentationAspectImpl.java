package ohml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Circuit;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_ComponentGraph;
  private ConceptPresentation props_Ohm;
  private ConceptPresentation props_Resistance;
  private ConceptPresentation props_ResistanceUnit;
  private ConceptPresentation props_Resistor;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Circuit:
        if (props_Circuit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Circuit = cpb.create();
        }
        return props_Circuit;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.ComponentGraph:
        if (props_ComponentGraph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComponentGraph = cpb.create();
        }
        return props_ComponentGraph;
      case LanguageConceptSwitch.Ohm:
        if (props_Ohm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ohm");
          props_Ohm = cpb.create();
        }
        return props_Ohm;
      case LanguageConceptSwitch.Resistance:
        if (props_Resistance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Resistance");
          props_Resistance = cpb.create();
        }
        return props_Resistance;
      case LanguageConceptSwitch.ResistanceUnit:
        if (props_ResistanceUnit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ResistanceUnit = cpb.create();
        }
        return props_ResistanceUnit;
      case LanguageConceptSwitch.Resistor:
        if (props_Resistor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Resistor = cpb.create();
        }
        return props_Resistor;
    }
    return null;
  }
}
